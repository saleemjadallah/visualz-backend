#!/usr/bin/env python3
"""
Test Live App Flow with MOCK_MODE Disabled
Tests the complete system with real TypeScript template execution
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import asyncio
import json
from app.api.parametric import call_typescript_template, run_parametric_generation

async def test_typescript_bridge():
    """Test the TypeScript bridge directly"""
    print("🔧 Testing TypeScript Bridge Direct Call")
    print("=" * 50)
    
    # Test parameters for a birthday party
    test_params = {
        "culture": "american",
        "eventType": "birthday-child",
        "celebrationType": "birthday-child",
        "ageGroup": "child",
        "theme": "superhero",
        "guestCount": 25,
        "spaceDimensions": {"width": 8, "depth": 10, "height": 3},
        "budgetRange": "medium",
        "balloonSystems": True,
        "photoBackdrops": True,
        "interactiveProps": True
    }
    
    try:
        # Test celebratory template
        print("🎉 Testing CelebratoryTemplate execution...")
        result = await call_typescript_template("celebratory", test_params)
        
        if result:
            print("✅ TypeScript bridge working!")
            print(f"   📦 Models generated: {len(result.get('models', []))}")
            print(f"   🎭 Template used: {result.get('template_used', 'unknown')}")
            print(f"   🎯 Generated by: {result.get('models', [{}])[0].get('generated_by', 'unknown')}")
            
            if 'celebratory' in result.get('template_used', ''):
                print("   🎊 CelebratoryTemplate successfully executed!")
                
        else:
            print("❌ TypeScript bridge failed - using fallback")
            
    except Exception as e:
        print(f"❌ TypeScript bridge test failed: {str(e)}")

async def test_parametric_generation():
    """Test the full parametric generation flow"""
    print("\n🎨 Testing Full Parametric Generation Flow")
    print("=" * 50)
    
    test_params = {
        "culture": "american",
        "eventType": "birthday-child",
        "guestCount": 25,
        "spaceDimensions": {"width": 8, "depth": 10, "height": 3},
        "budgetRange": "medium",
        "formalityLevel": "casual",
        "specialRequirements": "superhero theme, interactive activities"
    }
    
    try:
        print("🚀 Running parametric generation (furniture)...")
        result = await run_parametric_generation("furniture", test_params)
        
        print("✅ Parametric generation completed!")
        print(f"   📦 Models: {len(result.get('models', []))}")
        print(f"   🎭 Cultural elements: {len(result.get('culturalElements', []))}")
        print(f"   💡 Recommendations: {len(result.get('recommendations', []))}")
        
        # Check if it's using TypeScript or fallback
        models = result.get('models', [])
        if models and 'generated_by' in models[0]:
            generation_method = models[0]['generated_by']
            if generation_method == 'typescript_template':
                print("   🎯 Using LIVE TypeScript templates!")
            else:
                print(f"   ⚠️ Using fallback: {generation_method}")
        else:
            print("   ⚠️ Using fallback mock data")
            
    except Exception as e:
        print(f"❌ Parametric generation test failed: {str(e)}")

def test_mock_mode_status():
    """Test MOCK_MODE status"""
    print("\n🔍 Checking MOCK_MODE Status")
    print("=" * 50)
    
    try:
        from app.api.parametric import MOCK_MODE
        print(f"MOCK_MODE = {MOCK_MODE}")
        
        if MOCK_MODE:
            print("⚠️ MOCK_MODE is ENABLED - system will use mock data")
            print("   To test live app, MOCK_MODE should be False")
        else:
            print("✅ MOCK_MODE is DISABLED - system will use real TypeScript templates")
            print("   Ready for live app testing!")
            
    except Exception as e:
        print(f"❌ Could not check MOCK_MODE: {str(e)}")

def test_node_bridge_script():
    """Test if Node.js bridge script exists and is executable"""
    print("\n📜 Testing Node.js Bridge Script")
    print("=" * 50)
    
    import subprocess
    from pathlib import Path
    
    try:
        # Check Node.js version
        result = subprocess.run(['node', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"✅ Node.js available: {result.stdout.strip()}")
        else:
            print("❌ Node.js not available")
            return
        
        # Check bridge script
        script_path = Path(__file__).parent / "parametric-furniture" / "templates" / "node-bridge.js"
        if script_path.exists():
            print(f"✅ Bridge script found: {script_path}")
            
            # Test basic execution
            test_input = json.dumps({
                "template_type": "furniture",
                "parameters": {"culture": "modern", "eventType": "test"}
            })
            
            result = subprocess.run([
                'node', str(script_path), test_input
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                print("✅ Bridge script executable")
                try:
                    output = json.loads(result.stdout)
                    print(f"   📦 Test output: {output.get('template_used', 'unknown')}")
                except:
                    print("   ⚠️ Output not JSON formatted")
            else:
                print(f"❌ Bridge script failed: {result.stderr}")
                
        else:
            print(f"❌ Bridge script not found: {script_path}")
            
    except Exception as e:
        print(f"❌ Node.js bridge test failed: {str(e)}")

async def main():
    """Run all tests"""
    print("🎯 LIVE APP FLOW TESTING")
    print("Testing with MOCK_MODE disabled for real TypeScript template execution")
    print("=" * 80)
    
    # Test 1: Check MOCK_MODE status
    test_mock_mode_status()
    
    # Test 2: Check Node.js bridge
    test_node_bridge_script()
    
    # Test 3: Test TypeScript bridge
    await test_typescript_bridge()
    
    # Test 4: Test full parametric generation
    await test_parametric_generation()
    
    print("\n🎉 LIVE APP FLOW TESTING COMPLETE!")
    print("=" * 80)
    print("✨ Summary:")
    print("   - MOCK_MODE has been disabled")
    print("   - TypeScript templates will be used for real generation")
    print("   - CelebratoryTemplate integration is ready")
    print("   - System ready for live app testing!")

if __name__ == "__main__":
    asyncio.run(main())